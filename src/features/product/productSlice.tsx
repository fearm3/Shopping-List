import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
// import axios from "axios";

const initialState = {
  items: [],
  status: null,
};

// export const productFetch: any = createAsyncThunk(
//   "product/productFetch",
//   async () => {
//     const response = await axios.get("https://fakestoreapi.com/products");
//     return response?.data;
//   }
// );

export interface Basket {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: Rating;
}
export interface Rating {
  rate: number;
  count: number;
}

export const productSlice: any = createSlice(
  {
    name: "product",
    initialState,

    reducers: {
      // addToCart: (state: any, action: PayloadAction<number>) => {
      //   state.items = [...action.payload, state.cart];
      // },
      // decrement: (state) => {
      //   state.items.count -= 1;
      // },
      // increment: (state) => {
      //   state.items.count += 1;
      // },
      // // Use the PayloadAction type to declare the contents of `action.payload`
      // incrementByAmount: (state, action: PayloadAction<number>) => {
      //   state.items.count += action.payload;
      // },
    },
    extraReducers: {
      // [productFetch.pending]: (state: any, action: any) => {
      //   state.status = "pending";
      // },
      // [productFetch.fulfilled]: (state: any, action: any) => {
      //   state.status = "success";
      //   state.items = action.payload;
      // },
      // [productFetch.rejected]: (state: any, action: any) => {
      // state.status = "reject";
      // state.error = action.payload;
    },
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
);

//! recuders daki func. buraya yaz.
// export const { increment, decrement, incrementByAmount } = productSlice.actions;
export const {} = productSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

export default productSlice.reducer;
